version: 2.1
orbs: 
  slack: circleci/slack@4.10.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli



parameters:
  workflow-id:
    type: string
    default: "8889"


commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy project backend cloudfront stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy project frontend cloudfront stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: cacfed63-3a98-4951-958f-af5e5aa339b3" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >> 
jobs:
  notify:
      docker:
        - image: 'cimg/base:stable'
      steps:
        - slack/notify:
            custom: |
              {
                "blocks": [
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "plain_text",
                        "text": "Workflow started",
                        "emoji": true
                      }
                    ]
                  }
                ]
              }
            event: always
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm i
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - save_cache:
          paths: [frontend/dist]
          key: frontend-dist
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            sudo npm install
            sudo npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm run test
            exit 0
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm run test
            exit 0
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend-end
          command: |
            cd frontend
            npm install 
            npm update
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            npm update
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople-backend-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"
      - run:
          name: Save backend URL in kvdb
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-<<pipeline.parameters.workflow-id>>" \
              --output text)
            curl https://kvdb.io/CcQeWJgcDA33jZSnjnDwTM/BACKEND_URL -d http://$BACKEND_IP:3030
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople-frontend-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --output text >> inventory.txt
            cat inventory.txt
            ls -la
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  configure-infrastructure:
    executor: python
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["d2:86:60:d0:82:d0:16:6b:ec:8b:ed:8e:80:65:96:6f"]
      - attach_workspace:
          at: .
      - run:
          name: Install Ansible dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            apk add curl
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1   

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl https://kvdb.io/CcQeWJgcDA33jZSnjnDwTM/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-<<pipeline.parameters.workflow-id>>" --recursive
      - save_cache:
          paths: [frontend/dist]
          key: frontend-dist
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - revert_migrations:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail    
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1                   
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d2:86:60:d0:82:d0:16:6b:ec:8b:ed:8e:80:65:96:6f"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
            ls -la
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail 
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  smoke-test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl https://kvdb.io/CcQeWJgcDA33jZSnjnDwTM/BACKEND_URL)
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<<pipeline.parameters.workflow-id>>.s3.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"

      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - revert_migrations:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in KVDB for cleanup later
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "WorkflowID: " $WorkflowID
            curl https://kvdb.io/CcQeWJgcDA33jZSnjnDwTM/WorkflowID -d $WorkflowID || true
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="<<pipeline.parameters.workflow-id>>" \
              --tags project=udapeople
      - revert_migrations:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1


  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            OldWorkflowID=$(curl https://kvdb.io/CcQeWJgcDA33jZSnjnDwTM/WorkflowID)
            CurrentWorkflowID=<<pipeline.parameters.workflow-id>>
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done here."
            fi
          environment:
            TERM: xterm-256color
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  run-migrations:
    executor: node
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            ls -la
            sudo apt-get update && sudo apt-get upgrade -yy && sudo apt-get install -yy less ca-certificates
            sudo update-ca-certificates -f -v
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
            #npm run migrations

      - run:
          name: Send migration results to KVDB
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update KVDB..."
              curl https://kvdb.io/CcQeWJgcDA33jZSnjnDwTM/DB_MIGRATION_<<pipeline.parameters.workflow-id>> -d 'success'
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl https://kvdb.io/CcQeWJgcDA33jZSnjnDwTM/DB_MIGRATION_<<pipeline.parameters.workflow-id>> -d 'failure'
            fi
            echo "WorkflowID=<<pipeline.parameters.workflow-id>>"
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      # Here's where you will add some code to rollback on failure 
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1          
workflows:
  send-notification:
    jobs:
      - notify:
          context: slack-secrets

  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]